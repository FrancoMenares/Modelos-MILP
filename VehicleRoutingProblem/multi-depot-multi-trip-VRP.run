
reset ;

model multi-depot-multi-trip-VRP.mod	;
data  multi-depot-multi-trip-VRP.dat	;


/* GUROBI */
option solver gurobi										;
# option gurobi_options 'threads= 3 ' 						;
#option solver_msg 0 										;
#option DisplayInterval 1 									;
#option gurobi_options 'outlev 1 logfreq 1 timing 1 ' 		;
#option presolve 10 										;
#option show_stats 1 										;
# option gurobi_options 'timelim = 3600 return_mipgap 2 ' 	;


param Ttotal default 0				;
let Ttotal := time()				;
solve								;
let Ttotal := time() - Ttotal		;
printf "\n\n"						;
printf "Tiempo CPU: %d\n", Ttotal 	;

#/*
printf "\n\n"	;
param origen default 0	;
for {k in K: sum{(i, j) in A, v in V}x[i,j,k,v] > 0}{
	printf " Vehiculo %s ::::::: \n", k	;
	for {v in V: sum{(i, j) in A}x[i,j,k,v] > 0}{
		printf "\t ::::::: Vuelta %s \n", v	;
		for {d in D: sum{j in N: (d, j) in A}x[d,j,k,v] > 0}{
			let origen := d	;
			printf "\t %s -> ", origen	;
			for {r in N}{
				for {j in N: (origen, j) in A and x[origen,j,k,v] == 1}{
					printf "%s", j	;
					let origen := j	;
					if origen in D then {
						break	;
					}
					printf " -> "	;
				}
				if origen in D then {
					break	;
				}
			}
			printf "\n"	;
		}
		printf "\n"	;
	}
	printf "\n"	;
}
#*/

/*
for {k in K: sum{(i, j) in A, v in V}x[i,j,k,v] > 0}{
	printf " Vehiculo %s ::::::: \n", k	;
	for {v in V: sum{(i, j) in A}x[i,j,k,v] > 0}{
		printf " ::::::: Vuelta %s \n", v	;
		for {(i,j) in A: x[i,j,k,v] == 1}{
			printf " %s %s\n", i, j ;
		}
		printf "\n" ;
	}
	printf "\n" ;
}
*/


